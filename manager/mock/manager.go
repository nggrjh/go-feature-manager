// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeatureManager is a mock of FeatureManager interface.
type MockFeatureManager struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureManagerMockRecorder
}

// MockFeatureManagerMockRecorder is the mock recorder for MockFeatureManager.
type MockFeatureManagerMockRecorder struct {
	mock *MockFeatureManager
}

// NewMockFeatureManager creates a new mock instance.
func NewMockFeatureManager(ctrl *gomock.Controller) *MockFeatureManager {
	mock := &MockFeatureManager{ctrl: ctrl}
	mock.recorder = &MockFeatureManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureManager) EXPECT() *MockFeatureManagerMockRecorder {
	return m.recorder
}

// IsEnabled mocks base method.
func (m *MockFeatureManager) IsEnabled(name string, fallback bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", name, fallback)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockFeatureManagerMockRecorder) IsEnabled(name, fallback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockFeatureManager)(nil).IsEnabled), name, fallback)
}

// String mocks base method.
func (m *MockFeatureManager) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFeatureManagerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFeatureManager)(nil).String))
}
