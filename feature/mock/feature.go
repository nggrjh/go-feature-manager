// Code generated by MockGen. DO NOT EDIT.
// Source: feature.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFeature is a mock of IFeature interface.
type MockIFeature struct {
	ctrl     *gomock.Controller
	recorder *MockIFeatureMockRecorder
}

// MockIFeatureMockRecorder is the mock recorder for MockIFeature.
type MockIFeatureMockRecorder struct {
	mock *MockIFeature
}

// NewMockIFeature creates a new mock instance.
func NewMockIFeature(ctrl *gomock.Controller) *MockIFeature {
	mock := &MockIFeature{ctrl: ctrl}
	mock.recorder = &MockIFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFeature) EXPECT() *MockIFeatureMockRecorder {
	return m.recorder
}

// IsEnabled mocks base method.
func (m *MockIFeature) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockIFeatureMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockIFeature)(nil).IsEnabled))
}

// String mocks base method.
func (m *MockIFeature) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIFeatureMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIFeature)(nil).String))
}
