// Code generated by MockGen. DO NOT EDIT.
// Source: collector.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockFeatureCollector is a mock of FeatureCollector interface.
type MockFeatureCollector struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureCollectorMockRecorder
}

// MockFeatureCollectorMockRecorder is the mock recorder for MockFeatureCollector.
type MockFeatureCollectorMockRecorder struct {
	mock *MockFeatureCollector
}

// NewMockFeatureCollector creates a new mock instance.
func NewMockFeatureCollector(ctrl *gomock.Controller) *MockFeatureCollector {
	mock := &MockFeatureCollector{ctrl: ctrl}
	mock.recorder = &MockFeatureCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureCollector) EXPECT() *MockFeatureCollectorMockRecorder {
	return m.recorder
}

// Observe mocks base method.
func (m *MockFeatureCollector) Observe(duration, lifetime time.Duration, labelValues ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{duration, lifetime}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Observe", varargs...)
}

// Observe indicates an expected call of Observe.
func (mr *MockFeatureCollectorMockRecorder) Observe(duration, lifetime interface{}, labelValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{duration, lifetime}, labelValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockFeatureCollector)(nil).Observe), varargs...)
}
